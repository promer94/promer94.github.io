{"version":3,"sources":["webpack:///path---index-0f57b232953877ef01a8.js","webpack:///./.cache/json/index.json"],"names":["webpackJsonp","366","module","exports","data","site","siteMetadata","title","description","url","author","twitter","adsense","remark","posts","post","html","frontmatter","layout","path","categories","date","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,gBAAAC,YAAA,kBAAAC,IAAA,6BAAAC,OAAA,WAAAC,QAAA,WAAAC,QAAA,KAAkJC,QAAWC,QAAUC,MAAQC,KAAA,24DAAAC,aAAy6DC,OAAA,OAAAX,MAAA,gBAAAY,KAAA,kBAAAC,YAAA,sBAAAC,KAAA,iBAA6HN,MAAQC,KAAA,sh1BAAwl3BC,aAAkGC,OAAA,OAAAX,MAAA,qBAAAY,KAAA,uBAAAC,YAAA,4BAAAC,KAAA,iBAA6IN,MAAQC,KAAA,u9CAAgyCC,aAAiPC,OAAA,OAAAX,MAAA,2BAAAY,KAAA,YAAAC,YAAA,OAAAC,KAAA,mBAAoHC","file":"path---index-0f57b232953877ef01a8.js","sourcesContent":["webpackJsonp([142629428675168],{\n\n/***/ 366:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Eloquent Code\",\"description\":\"A personal blog\",\"url\":\"https://yixuanxu.club/blog\",\"author\":\"YixuanXu\",\"twitter\":\"YixuanXu\",\"adsense\":\"\"}},\"remark\":{\"posts\":[{\"post\":{\"html\":\"<h2>https 与 http</h2>\\n<p>http 协议是当前互联网中最流行的协议之一，但 http 协议本身存在很大的安全漏洞。明文传输的 http 协议已经不适合这个时代了。 https 协议正是为了解决这个问题而诞生的。https 协议又被称为 http over TLS，http over SSL。 它通过 http 协议进行通信，利用 TLS/SSL 来加密数据包。</p>\\n<!--more-->\\n<h2>https 的工作原理</h2>\\n<p>在讨论 https 之前，复习一下 http 协议的工作方式是很重要的。 我们可以使用 curl 这个命令行工具来观察一下一个典型的 http 通信过程。\\n<img src=\\\"https://i.loli.net/2018/11/14/5beb9597e10cb.png\\\" alt=\\\"540300e8.png\\\">\\n在最开始的三行，可以看到一个典型的 tcp 三次握手过程，接着的就是 http 的 request header，紧接着的就是 response header 和 body。http 最大的问题就在于所有的通信都是明文传输，任何人都能够截取到通信内容。所以必须引入一个加密机制来保护通信。</p>\\n<h3>对称加密</h3>\\n<p>说到加密，最典型的加密方式都是对称加密。通信双方 A B 共享一个秘钥，用同一个秘钥进行加密解密。对称加密最大的问题在于秘钥的分发。秘钥一旦泄露，加密也就失效了。</p>\\n<h3>非对称加密</h3>\\n<p>跟对称加密相对的，还有一种非对称加密的方式。 A B 各自拥有自己的公钥跟私钥，A B 互相交换公钥。 当需要传输信息时，用对方的公钥加密，对方就能使用私钥解密。同时起到签名的作用，确保信息的来源。非对称加密是比较安全的，但是会比对称加密消耗更多的资源。</p>\\n<h3>https 需要解决的问题</h3>\\n<ul>\\n<li>Privacy\\nhttps 必须能保证隐私，通信内容应该被加密。</li>\\n<li>Integrity\\nhttps 必须能保证通信内容的完整性，确保通信内容没有被篡改过。</li>\\n<li>\\n<p>Identification\\nhttps 必须能使通信双方确认对方的身份</p>\\n<h3>一个简化的 https 的流程</h3>\\n<p>我们还是可以使用 curl 来了解整个通信的过程\\n<img src=\\\"https://i.loli.net/2018/11/14/5beb95cc10ba7.png\\\" alt=\\\"0b4a7270.png\\\"></p>\\n</li>\\n<li>首先我们可以看到熟悉的三次握手，然后 client 将 tls 版本号和 加密算法备选列表（cypher suite）都发送给了 server。</li>\\n<li>然后 server 选择合适的加密方式，回复给 client 证书和公钥，client 可以通过证书来确认 server 的身份。</li>\\n<li>client 确认完身份之后，生成一个随机秘钥 然后用 server 的公钥加密，发送给 server 端。</li>\\n<li>server 端收到 加密过的随机秘钥 用自己的私钥解密 得到与 client 相同的随机秘钥。</li>\\n<li>\\n<p>此时双方拥有了一个相同的秘钥，就可以使用这个秘钥加密 http 协议的文本了。</p>\\n<h3>实际的 https</h3>\\n<p>在实际的生产中，https 运用方式是有一些区别的</p>\\n</li>\\n<li>在普通的 web page 环境中，client 往往需要确认 server 的身份。上述的交换过程保证了双方通信的保密性，却无法保证双方的身份。所有 server 往往需要在一个第三方机构，也就是 CA 处注册自己的域名。 这样 client 可以通过 ca 提供的证书验证 server 的身份。 web page 往往并不需要验证 client 的身份 所有 client 并不需要提供自己的证书。</li>\\n<li>当涉及到支付等敏感场景时，也需要确认 client 的身份，这个时候往往需要客户提供自己的证书，早期银行支付使用的 u 盾等类似的产品正是这个作用</li>\\n<li>在交换公钥的过程中，生成了三个随机数，最后一个随机数是用 server 的公钥加密的然后 client 和 server 端通过这个三个随机数来生成对称秘钥加密 http。</li>\\n</ul>\",\"frontmatter\":{\"layout\":\"post\",\"title\":\"What is https\",\"path\":\"/https-explain/\",\"categories\":[\"http\",\"Fundamental\"],\"date\":\"2018/09/02\"}}},{\"post\":{\"html\":\"<h1>闭包</h1>\\n<p> 对于 JavaScript 的初学者来说，闭包算是一个难点。 <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\\\">MDN</a> 的 JavaScript 文档对闭包的概念给出了准确的定义，也提供了简单直观的的实例，是一个非常好的学习材料。 这篇文章将从文档出发，对闭包的知识点进行一个简单的梳理。</p>\\n<!--more-->\\n<h2>闭包是什么</h2>\\n<p>首先我们需要对闭包提供一个准确的定义。 在文档中，闭包的定义是 ‘A closure is the combination of a function and the lexical environment within which that function was declared’。这个定义非常的拗口，我们只需要留有一个印象。真正理解定义最好方式就是通过实际的代码。 假设：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">init</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token keyword\\\">var</span> name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Hello\\\"</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// name 是一个被 init 创建的局部变量</span>\\n   <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">displayName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> \\n       <span class=\\\"token comment\\\">// displayName() 是内部函数,一个闭包</span>\\n       <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 使用了父函数中声明的变量</span>\\n   <span class=\\\"token punctuation\\\">}</span>\\n   <span class=\\\"token function\\\">displayName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">init</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>通过以上的代码块来看，我们可以简单总结为闭包是 ‘一个拥有外部变量的函数’。 例子中的函数 <code class=\\\"language-text\\\">displayname</code>可以调用不属于自己的外部变量<code class=\\\"language-text\\\">name</code>，不管此 <code class=\\\"language-text\\\">displayName</code> 函数最终是否被返回，实际上由 <code class=\\\"language-text\\\">name</code> 和 <code class=\\\"language-text\\\">displayName</code> 组成的闭包已经形成了。  </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">init</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Hello\\\"</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// name 是一个被 init 创建的局部变量</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">displayName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> \\n        <span class=\\\"token comment\\\">// displayName() 是内部函数,一个闭包</span>\\n        <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 使用了父函数中声明的变量</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">displayName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 闭包被返回</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">var</span> fun <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">init</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">fun</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>上面的新代码块的区别在于函数<code class=\\\"language-text\\\">init</code>返回了一个函数<code class=\\\"language-text\\\">displayName</code>。通过这个返回的函数，我们就可以访问这个函数所相关联的词法环境或者说数据。本来应该被销毁的<code class=\\\"language-text\\\">name</code>变量保留了下来，而且只能通过调用函数的方式来访问，这也就是私有性。 </p>\\n<hr>\\n<h2>闭包的作用</h2>\\n<p>实际上在上一个例子中，我们已经看到了闭包的作用，闭包可以用来模拟私有变量和方法。 它让函数和函数所操作的某些数据联系了起来。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">makeCounter</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> privateCounter <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">changeBy</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    privateCounter <span class=\\\"token operator\\\">+=</span> val<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    increment<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">changeBy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    decrement<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">changeBy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> privateCounter<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>  \\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> Counter1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">makeCounter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> Counter2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">makeCounter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Counter1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">value</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">/* logs 0 */</span>\\nCounter1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">increment</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nCounter1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">increment</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Counter1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">value</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">/* logs 2 */</span>\\nCounter1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">decrement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Counter1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">value</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">/* logs 1 */</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Counter2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">value</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">/* logs 0 */</span></code></pre>\\n      </div>\\n<p>在上面的例子中文门可以看到 <code class=\\\"language-text\\\">privateCounter</code>和<code class=\\\"language-text\\\">changeBy</code>作为下面三个函数共同的词法环境形成了闭包。在<code class=\\\"language-text\\\">makeCounter</code>执行之后，本该消失的词法环境被保留下来，只能通过返回的三个函数进行更改和访问。</p>\\n<hr>\\n<h2>在循环中创建闭包：一个常见错误；</h2>\\n<p>在 ECMAScript 2015 引入 let 这个关键字之前，有一个常见的在循环中创建闭包的错误。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\"><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>help<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>Helpful notes will appear here<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">></span></span>E-mail: <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>text<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>email<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>email<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">></span></span>Name: <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>text<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>name<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>name<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">></span></span>Age: <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>text<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>age<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>age<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">showHelp</span><span class=\\\"token punctuation\\\">(</span>help<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'help'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>innerHTML <span class=\\\"token operator\\\">=</span> help<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">setupHelp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> helpText <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'email'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'help'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Your e-mail address'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'name'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'help'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Your full name'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'age'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'help'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Your age (you must be over 16)'</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> helpText<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> item <span class=\\\"token operator\\\">=</span> helpText<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onfocus</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">showHelp</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">.</span>help<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">setupHelp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>这段代码执行的结果就是，无论你选择哪一个输入框，helper 信息都会显示为第三个。原因就是返回三个闭包实际上共享了由<code class=\\\"language-text\\\">var</code>这个关键词创建的 <code class=\\\"language-text\\\">item</code>这一个词法环境。闭包只会捕获自由变量的引用，所以三个闭包中的<code class=\\\"language-text\\\">item</code>都指向了第三个 helper text。根据这一点我们可以将代码修改如下</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">setupHelpAnonymous</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> helpText <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'email'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'help'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Your e-mail address'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'name'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'help'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Your full name'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'age'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'help'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Your age (you must be over 16)'</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> helpText<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">var</span> item <span class=\\\"token operator\\\">=</span> helpText<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">var</span> item <span class=\\\"token operator\\\">=</span> helpText<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onfocus</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token function\\\">showHelp</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">.</span>help<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n     <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">setupHelpAnonymous</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>在上面的代码片段中，通过使用一个 IIFE(立即执行函数表达式)对<code class=\\\"language-text\\\">item</code>进行了立刻求值。通过这种方式<code class=\\\"language-text\\\">onfocus</code>就能获取到正确的 helpText。在 ES6 引入了‘block scope’之后，我们可以使用 <code class=\\\"language-text\\\">let</code> 关键字更优雅的解决这个错误</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">showHelp</span><span class=\\\"token punctuation\\\">(</span>help<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'help'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>innerHTML <span class=\\\"token operator\\\">=</span> help<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">setupHelp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> helpText <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'email'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'help'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Your e-mail address'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'name'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'help'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Your full name'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'age'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'help'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Your age (you must be over 16)'</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> helpText<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> item <span class=\\\"token operator\\\">=</span> helpText<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onfocus</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">showHelp</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">.</span>help<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">setupHelp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>每一次循环，都有一个新的 item 被创建，三个函数不再共享同一个词法环境。</p>\",\"frontmatter\":{\"layout\":\"post\",\"title\":\"JavaScript Closure\",\"path\":\"/javascript-closure/\",\"categories\":[\"JavaScript\",\"Fundamental\"],\"date\":\"2018/04/02\"}}},{\"post\":{\"html\":\"<h1>如何在 Mac 上配置你的 GPG 秘钥</h1>\\n<p>我们在 github 查看 commit history 的时候，很容易发现有一些 commit 显示为 verified，有一些则不是。\\n<img src=\\\"https://preview.ibb.co/i1W7HT/git_gpg.png\\\" alt=\\\"pic\\\"></p>\\n<p>点开 verified\\b 的提示，\\b可以看到这些提交\\b都是经过 GPG 签名产生的。</p>\\n<!--more-->\\n<h2>GPG 的作用</h2>\\n<p>GPG 秘钥可以用来给你的本地\\b commit 签名，确保\\b\\b提交者是可信的。这确保了整个 git\\b 历史的可信度。</p>\\n<h2>GPG 在 mac 上的配置方法</h2>\\n<p>方法默认\\b已安装 <a href=\\\"https://brew.sh/\\\">Homebrew</a>\\b</p>\\n<ol>\\n<li>执行 <code class=\\\"language-text\\\">brew install gpg</code> 安\\u001d\\u001d装依赖。</li>\\n<li>输入 <code class=\\\"language-text\\\">gpg --full-generate-key</code> \\b按照提示\\b完成配置，在第三部\\b\\b步选择时长的时候，个人使用可以填 0，表示永不过期。最后的密码可以选填。</li>\\n<li>安装完成后输入 <code class=\\\"language-text\\\">gpg --list-keys</code> 查看刚刚生成的秘钥，pub 下\\b的那一长段就是GPG-\\b\\bID。</li>\\n<li>输入 <code class=\\\"language-text\\\">gpg --armor --export pub GPG-ID</code> 把公钥复制出来，拷贝到 <a href=\\\"https://github.com/settings/keys\\\">GitHub GPG Keys</a> 上</li>\\n<li>输入 <code class=\\\"language-text\\\">git config --global user.signingkey GPG-ID</code> 来配置使用。</li>\\n<li>单次提交时\\b使用 \\b<code class=\\\"language-text\\\">git commit -S</code> 参数来开启 GPG key，或者使用 <code class=\\\"language-text\\\">git config --global commit.gpgsign true</code> 设置为全局默认使用。</li>\\n<li>如果在 commit 的过程出现了签名错误的情况可以尝试执行 <code class=\\\"language-text\\\">echo &#39;export GPG_TTY=$(tty)&#39; &gt;&gt; ~/.bash_profile</code> \\b将 gpg 密钥添加到你的\\b bash profile 中。\\b如果你使用的是其他 shell，\\b替换成你的 shell\\b 配置文件即可。</li>\\n<li>如果还有其他的问题可以查阅 <a href=\\\"https://help.github.com/articles/signing-commits-with-gpg/\\\">Github</a>\\b\\n\\b  </li>\\n</ol>\",\"frontmatter\":{\"layout\":\"post\",\"title\":\"使用 GPG 为你的 git commit 签名\",\"path\":\"/git-gpg/\",\"categories\":[\"Git\"],\"date\":\"2018/07/13\"}}}]}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---index-0f57b232953877ef01a8.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Eloquent Code\",\"description\":\"A personal blog\",\"url\":\"https://yixuanxu.club/blog\",\"author\":\"YixuanXu\",\"twitter\":\"YixuanXu\",\"adsense\":\"\"}},\"remark\":{\"posts\":[{\"post\":{\"html\":\"<h2>https 与 http</h2>\\n<p>http 协议是当前互联网中最流行的协议之一，但 http 协议本身存在很大的安全漏洞。明文传输的 http 协议已经不适合这个时代了。 https 协议正是为了解决这个问题而诞生的。https 协议又被称为 http over TLS，http over SSL。 它通过 http 协议进行通信，利用 TLS/SSL 来加密数据包。</p>\\n<!--more-->\\n<h2>https 的工作原理</h2>\\n<p>在讨论 https 之前，复习一下 http 协议的工作方式是很重要的。 我们可以使用 curl 这个命令行工具来观察一下一个典型的 http 通信过程。\\n<img src=\\\"https://i.loli.net/2018/11/14/5beb9597e10cb.png\\\" alt=\\\"540300e8.png\\\">\\n在最开始的三行，可以看到一个典型的 tcp 三次握手过程，接着的就是 http 的 request header，紧接着的就是 response header 和 body。http 最大的问题就在于所有的通信都是明文传输，任何人都能够截取到通信内容。所以必须引入一个加密机制来保护通信。</p>\\n<h3>对称加密</h3>\\n<p>说到加密，最典型的加密方式都是对称加密。通信双方 A B 共享一个秘钥，用同一个秘钥进行加密解密。对称加密最大的问题在于秘钥的分发。秘钥一旦泄露，加密也就失效了。</p>\\n<h3>非对称加密</h3>\\n<p>跟对称加密相对的，还有一种非对称加密的方式。 A B 各自拥有自己的公钥跟私钥，A B 互相交换公钥。 当需要传输信息时，用对方的公钥加密，对方就能使用私钥解密。同时起到签名的作用，确保信息的来源。非对称加密是比较安全的，但是会比对称加密消耗更多的资源。</p>\\n<h3>https 需要解决的问题</h3>\\n<ul>\\n<li>Privacy\\nhttps 必须能保证隐私，通信内容应该被加密。</li>\\n<li>Integrity\\nhttps 必须能保证通信内容的完整性，确保通信内容没有被篡改过。</li>\\n<li>\\n<p>Identification\\nhttps 必须能使通信双方确认对方的身份</p>\\n<h3>一个简化的 https 的流程</h3>\\n<p>我们还是可以使用 curl 来了解整个通信的过程\\n<img src=\\\"https://i.loli.net/2018/11/14/5beb95cc10ba7.png\\\" alt=\\\"0b4a7270.png\\\"></p>\\n</li>\\n<li>首先我们可以看到熟悉的三次握手，然后 client 将 tls 版本号和 加密算法备选列表（cypher suite）都发送给了 server。</li>\\n<li>然后 server 选择合适的加密方式，回复给 client 证书和公钥，client 可以通过证书来确认 server 的身份。</li>\\n<li>client 确认完身份之后，生成一个随机秘钥 然后用 server 的公钥加密，发送给 server 端。</li>\\n<li>server 端收到 加密过的随机秘钥 用自己的私钥解密 得到与 client 相同的随机秘钥。</li>\\n<li>\\n<p>此时双方拥有了一个相同的秘钥，就可以使用这个秘钥加密 http 协议的文本了。</p>\\n<h3>实际的 https</h3>\\n<p>在实际的生产中，https 运用方式是有一些区别的</p>\\n</li>\\n<li>在普通的 web page 环境中，client 往往需要确认 server 的身份。上述的交换过程保证了双方通信的保密性，却无法保证双方的身份。所有 server 往往需要在一个第三方机构，也就是 CA 处注册自己的域名。 这样 client 可以通过 ca 提供的证书验证 server 的身份。 web page 往往并不需要验证 client 的身份 所有 client 并不需要提供自己的证书。</li>\\n<li>当涉及到支付等敏感场景时，也需要确认 client 的身份，这个时候往往需要客户提供自己的证书，早期银行支付使用的 u 盾等类似的产品正是这个作用</li>\\n<li>在交换公钥的过程中，生成了三个随机数，最后一个随机数是用 server 的公钥加密的然后 client 和 server 端通过这个三个随机数来生成对称秘钥加密 http。</li>\\n</ul>\",\"frontmatter\":{\"layout\":\"post\",\"title\":\"What is https\",\"path\":\"/https-explain/\",\"categories\":[\"http\",\"Fundamental\"],\"date\":\"2018/09/02\"}}},{\"post\":{\"html\":\"<h1>闭包</h1>\\n<p> 对于 JavaScript 的初学者来说，闭包算是一个难点。 <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\\\">MDN</a> 的 JavaScript 文档对闭包的概念给出了准确的定义，也提供了简单直观的的实例，是一个非常好的学习材料。 这篇文章将从文档出发，对闭包的知识点进行一个简单的梳理。</p>\\n<!--more-->\\n<h2>闭包是什么</h2>\\n<p>首先我们需要对闭包提供一个准确的定义。 在文档中，闭包的定义是 ‘A closure is the combination of a function and the lexical environment within which that function was declared’。这个定义非常的拗口，我们只需要留有一个印象。真正理解定义最好方式就是通过实际的代码。 假设：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">init</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token keyword\\\">var</span> name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Hello\\\"</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// name 是一个被 init 创建的局部变量</span>\\n   <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">displayName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> \\n       <span class=\\\"token comment\\\">// displayName() 是内部函数,一个闭包</span>\\n       <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 使用了父函数中声明的变量</span>\\n   <span class=\\\"token punctuation\\\">}</span>\\n   <span class=\\\"token function\\\">displayName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">init</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>通过以上的代码块来看，我们可以简单总结为闭包是 ‘一个拥有外部变量的函数’。 例子中的函数 <code class=\\\"language-text\\\">displayname</code>可以调用不属于自己的外部变量<code class=\\\"language-text\\\">name</code>，不管此 <code class=\\\"language-text\\\">displayName</code> 函数最终是否被返回，实际上由 <code class=\\\"language-text\\\">name</code> 和 <code class=\\\"language-text\\\">displayName</code> 组成的闭包已经形成了。  </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">init</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Hello\\\"</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// name 是一个被 init 创建的局部变量</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">displayName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> \\n        <span class=\\\"token comment\\\">// displayName() 是内部函数,一个闭包</span>\\n        <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 使用了父函数中声明的变量</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">displayName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 闭包被返回</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">var</span> fun <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">init</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">fun</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>上面的新代码块的区别在于函数<code class=\\\"language-text\\\">init</code>返回了一个函数<code class=\\\"language-text\\\">displayName</code>。通过这个返回的函数，我们就可以访问这个函数所相关联的词法环境或者说数据。本来应该被销毁的<code class=\\\"language-text\\\">name</code>变量保留了下来，而且只能通过调用函数的方式来访问，这也就是私有性。 </p>\\n<hr>\\n<h2>闭包的作用</h2>\\n<p>实际上在上一个例子中，我们已经看到了闭包的作用，闭包可以用来模拟私有变量和方法。 它让函数和函数所操作的某些数据联系了起来。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">makeCounter</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> privateCounter <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">changeBy</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    privateCounter <span class=\\\"token operator\\\">+=</span> val<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    increment<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">changeBy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    decrement<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">changeBy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> privateCounter<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>  \\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> Counter1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">makeCounter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> Counter2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">makeCounter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Counter1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">value</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">/* logs 0 */</span>\\nCounter1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">increment</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nCounter1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">increment</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Counter1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">value</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">/* logs 2 */</span>\\nCounter1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">decrement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Counter1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">value</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">/* logs 1 */</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Counter2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">value</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">/* logs 0 */</span></code></pre>\\n      </div>\\n<p>在上面的例子中文门可以看到 <code class=\\\"language-text\\\">privateCounter</code>和<code class=\\\"language-text\\\">changeBy</code>作为下面三个函数共同的词法环境形成了闭包。在<code class=\\\"language-text\\\">makeCounter</code>执行之后，本该消失的词法环境被保留下来，只能通过返回的三个函数进行更改和访问。</p>\\n<hr>\\n<h2>在循环中创建闭包：一个常见错误；</h2>\\n<p>在 ECMAScript 2015 引入 let 这个关键字之前，有一个常见的在循环中创建闭包的错误。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\"><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>help<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>Helpful notes will appear here<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">></span></span>E-mail: <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>text<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>email<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>email<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">></span></span>Name: <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>text<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>name<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>name<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">></span></span>Age: <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>text<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>age<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>age<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">showHelp</span><span class=\\\"token punctuation\\\">(</span>help<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'help'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>innerHTML <span class=\\\"token operator\\\">=</span> help<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">setupHelp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> helpText <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'email'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'help'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Your e-mail address'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'name'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'help'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Your full name'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'age'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'help'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Your age (you must be over 16)'</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> helpText<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> item <span class=\\\"token operator\\\">=</span> helpText<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onfocus</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">showHelp</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">.</span>help<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">setupHelp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>这段代码执行的结果就是，无论你选择哪一个输入框，helper 信息都会显示为第三个。原因就是返回三个闭包实际上共享了由<code class=\\\"language-text\\\">var</code>这个关键词创建的 <code class=\\\"language-text\\\">item</code>这一个词法环境。闭包只会捕获自由变量的引用，所以三个闭包中的<code class=\\\"language-text\\\">item</code>都指向了第三个 helper text。根据这一点我们可以将代码修改如下</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">setupHelpAnonymous</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> helpText <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'email'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'help'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Your e-mail address'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'name'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'help'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Your full name'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'age'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'help'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Your age (you must be over 16)'</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> helpText<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">var</span> item <span class=\\\"token operator\\\">=</span> helpText<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">var</span> item <span class=\\\"token operator\\\">=</span> helpText<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onfocus</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token function\\\">showHelp</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">.</span>help<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n     <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">setupHelpAnonymous</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>在上面的代码片段中，通过使用一个 IIFE(立即执行函数表达式)对<code class=\\\"language-text\\\">item</code>进行了立刻求值。通过这种方式<code class=\\\"language-text\\\">onfocus</code>就能获取到正确的 helpText。在 ES6 引入了‘block scope’之后，我们可以使用 <code class=\\\"language-text\\\">let</code> 关键字更优雅的解决这个错误</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">showHelp</span><span class=\\\"token punctuation\\\">(</span>help<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'help'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>innerHTML <span class=\\\"token operator\\\">=</span> help<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">setupHelp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> helpText <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'email'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'help'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Your e-mail address'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'name'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'help'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Your full name'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'age'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'help'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Your age (you must be over 16)'</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> helpText<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> item <span class=\\\"token operator\\\">=</span> helpText<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onfocus</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">showHelp</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">.</span>help<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">setupHelp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>每一次循环，都有一个新的 item 被创建，三个函数不再共享同一个词法环境。</p>\",\"frontmatter\":{\"layout\":\"post\",\"title\":\"JavaScript Closure\",\"path\":\"/javascript-closure/\",\"categories\":[\"JavaScript\",\"Fundamental\"],\"date\":\"2018/04/02\"}}},{\"post\":{\"html\":\"<h1>如何在 Mac 上配置你的 GPG 秘钥</h1>\\n<p>我们在 github 查看 commit history 的时候，很容易发现有一些 commit 显示为 verified，有一些则不是。\\n<img src=\\\"https://preview.ibb.co/i1W7HT/git_gpg.png\\\" alt=\\\"pic\\\"></p>\\n<p>点开 verified\\b 的提示，\\b可以看到这些提交\\b都是经过 GPG 签名产生的。</p>\\n<!--more-->\\n<h2>GPG 的作用</h2>\\n<p>GPG 秘钥可以用来给你的本地\\b commit 签名，确保\\b\\b提交者是可信的。这确保了整个 git\\b 历史的可信度。</p>\\n<h2>GPG 在 mac 上的配置方法</h2>\\n<p>方法默认\\b已安装 <a href=\\\"https://brew.sh/\\\">Homebrew</a>\\b</p>\\n<ol>\\n<li>执行 <code class=\\\"language-text\\\">brew install gpg</code> 安\\u001d\\u001d装依赖。</li>\\n<li>输入 <code class=\\\"language-text\\\">gpg --full-generate-key</code> \\b按照提示\\b完成配置，在第三部\\b\\b步选择时长的时候，个人使用可以填 0，表示永不过期。最后的密码可以选填。</li>\\n<li>安装完成后输入 <code class=\\\"language-text\\\">gpg --list-keys</code> 查看刚刚生成的秘钥，pub 下\\b的那一长段就是GPG-\\b\\bID。</li>\\n<li>输入 <code class=\\\"language-text\\\">gpg --armor --export pub GPG-ID</code> 把公钥复制出来，拷贝到 <a href=\\\"https://github.com/settings/keys\\\">GitHub GPG Keys</a> 上</li>\\n<li>输入 <code class=\\\"language-text\\\">git config --global user.signingkey GPG-ID</code> 来配置使用。</li>\\n<li>单次提交时\\b使用 \\b<code class=\\\"language-text\\\">git commit -S</code> 参数来开启 GPG key，或者使用 <code class=\\\"language-text\\\">git config --global commit.gpgsign true</code> 设置为全局默认使用。</li>\\n<li>如果在 commit 的过程出现了签名错误的情况可以尝试执行 <code class=\\\"language-text\\\">echo &#39;export GPG_TTY=$(tty)&#39; &gt;&gt; ~/.bash_profile</code> \\b将 gpg 密钥添加到你的\\b bash profile 中。\\b如果你使用的是其他 shell，\\b替换成你的 shell\\b 配置文件即可。</li>\\n<li>如果还有其他的问题可以查阅 <a href=\\\"https://help.github.com/articles/signing-commits-with-gpg/\\\">Github</a>\\b\\n\\b  </li>\\n</ol>\",\"frontmatter\":{\"layout\":\"post\",\"title\":\"使用 GPG 为你的 git commit 签名\",\"path\":\"/git-gpg/\",\"categories\":[\"Git\"],\"date\":\"2018/07/13\"}}}]}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/index.json\n// module id = 366\n// module chunks = 142629428675168"],"sourceRoot":""}